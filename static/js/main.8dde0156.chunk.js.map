{"version":3,"sources":["Demo components/Card_99.js","Demo components/DemoList_99.js","Demo_99.js","Demo components/SearchBox_99.js","Demo components/Scroll_99.js","Demo containers/App_99.js","serviceWorker.js","index.js"],"names":["Card","name","username","img","className","src","width","alt","DemoList","demo","map","user","i","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","filteredDemo","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAYeA,EAVF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,IAC5B,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAKF,EAAKG,MAAM,MAAMC,IAAI,UAC/B,4BAAKN,GACL,2BAAIC,KCSDM,EAbE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OACI,6BACKA,EAAKC,KAAI,SAACC,EAAKC,GACZ,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,KAAMQ,EAAKG,GAAGX,KAAMC,SAAUO,EAAKG,GAAGV,SAAUC,IAAKM,EAAKG,GAAGT,WCRlFM,EAAO,CAChB,CACEK,GAAI,EACJb,KAAM,QACNC,SAAU,2BACVC,IAAK,qBAEP,CACEW,GAAI,EACJb,KAAM,QACNC,SAAU,qBACVC,IAAK,qBAEP,CACEW,GAAI,EACJb,KAAM,OACNC,SAAU,eACVC,IAAK,oBAEP,CACEW,GAAI,EACJb,KAAM,eACNC,SAAU,iCACVC,IAAK,4BAEP,CACEW,GAAI,EACJb,KAAM,MACNC,SAAU,+DACVC,IAAK,mBAEP,CACEW,GAAI,EACJb,KAAM,MACNC,SAAU,mDACVC,IAAK,mBAEP,CACEW,GAAI,EACJb,KAAM,QACNC,SAAU,2BACVC,IAAK,qBAEP,CACEW,GAAI,EACJb,KAAM,YACNC,SAAU,2BACVC,IAAK,yBAEP,CACEW,GAAI,EACJb,KAAM,UACNC,SAAU,+DACVC,IAAK,uBAEP,CACEW,GAAI,GACJb,KAAM,cACNC,SAAU,4BACVC,IAAK,4BC3CIY,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKb,UAAU,OACX,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,eACZC,SAAUH,MCCPI,EARA,SAAAC,GACX,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCuCJC,G,wDApCX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAP1C,EAAKC,MAAM,CACPzB,KAAKA,EACLO,YAAY,IAJP,E,qDAYJ,IAAD,OACEmB,EAAgBC,KAAKF,MAAMzB,KAAK4B,QAAO,SAAA5B,GACzC,OAAOA,EAAKR,KACXqC,cACAC,SAAS,EAAKL,MAAMlB,YAAYsB,kBAErC,OAA+B,IAA3BF,KAAKF,MAAMzB,KAAK+B,OACT,uCAGX,yBAAKpC,UAAU,MACX,qCACA,kBAAC,EAAD,CAAWa,aAAcmB,KAAKP,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,KAAM0B,U,GA3BdM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8dde0156.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ name, username, img }) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={img} width=\"300\" alt='Intro' />\r\n            <h2>{name}</h2>\r\n            <p>{username}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card_99';\r\n\r\nconst DemoList = ({demo}) => {\r\n    return (\r\n        <div>\r\n            {demo.map((user,i) => {\r\n                return(\r\n                    <Card key={i} name={demo[i].name} username={demo[i].username} img={demo[i].img}/>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DemoList;","export const demo = [\r\n    {\r\n      id: 1,\r\n      name: 'Intro',\r\n      username: '自我介紹',\r\n      img: './image/intro.PNG'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Table',\r\n      username: '做表格',\r\n      img: './image/table.PNG'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Blog',\r\n      username: '文章',\r\n      img: './image/blog.PNG'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'ImageGallery',\r\n      username: '圖片的排序',\r\n      img: './image/imageGallery.PNG'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Div',\r\n      username: '製作區域並且能夠換色',\r\n      img: './image/div.PNG'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Nav',\r\n      username: '導航欄連結的區域',\r\n      img: './image/nav.PNG'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Tku60',\r\n      username: '影片連接',\r\n      img: './image/tku60.PNG'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Tictactoe',\r\n      username: '井字遊戲',\r\n      img: './image/tictactoe.PNG'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Monster',\r\n      username: '按攻擊與補血擊敗怪獸',\r\n      img: './image/monster.PNG'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Robofriends',\r\n      username: '顯示10張robot',\r\n      img: './image/robofriends.PNG'\r\n    }\r\n  ];","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search demos'\r\n            onChange={searchChange}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport DemoList from '../Demo components/DemoList_99';\r\nimport { demo } from '../Demo_99';\r\nimport SearchBox from '../Demo components/SearchBox_99';\r\nimport Scroll from '../Demo components/Scroll_99';\r\nimport './App_99.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            demo:demo,\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    onSearchChange = event =>{\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render(){\r\n        const filteredDemo =  this.state.demo.filter(demo=>{\r\n            return demo.name\r\n            .toLowerCase()\r\n            .includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if (this.state.demo.length === 0) {\r\n            return <h1>Loading</h1>;\r\n        } else {\r\n        return(\r\n        <div className='tc'>\r\n            <h1>Demos</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <DemoList demo={filteredDemo} />\r\n            </Scroll>\r\n        </div>\r\n    ) \r\n    }\r\n}\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Demo containers/App_99';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}